upltimate-restapi-authentication
> new project named django_rest_auth
> new app called accounts
> new app called social_accounts
add apps to isntalled_apps: rest_framework, accounts, social_accounts, corsheaders
> add cors middleware above common middleware
> set up environment variables using django-environs (also .gitignore)
> edit settings.py file accordingly (for environment variables)
> add secret_key to .env file
> update secret_key in settings.py
> add debug to .env file
> update debug in settings.py
> update accounts/models.py and add custom user
> add managers.py file to accounts app folder
> add user manager to managers.py in accounts app
> add AUTH_USER_MODEL to settings.py
> make and apply migrations
> commit
> create a superuser: admin1@gmail.com-henry-james-1
> add user to admin.py in accounts
> start the dev server and navigate to admin page
> use email instead of username to login with the superuser
> commit (bug fix - typing error)
> add serializers.py to accounts app
> add user register serializer to accounts/serializers.py (no idea what this is)
> add register view to accounts/views.py
> add urls.py to accounts app and add register path to urlpatterns of it
> link accounts/urls.py file in main urls.py file
> update validate method of user register serializer
> update create method of user register serializer
> add utils.py to accounts
> in accounts/utils.py, add generateOtp function (i think this will genereate a one time password)
> add send_code_to_user function to accounts/utils.py (i think we're trying to implement email verification using otp)
> committing
> add OneTimePassword model to accounts/models.py
> update send_code_to_user function in accounts/utils.py
> update user register view to use send_code_to_user after successful creation
> (not sure about this, but think we need to specify an email backend) i'll set it to console
> also, more email configs such as email host may need to be added later (not yet)
> make and apply migrations
> run server and make a post request to:
http://localhost:8000/api/v1/auth/register/
> everything seems be ok, register came back ok, email was printed in console, and otp is there
> committing
> add VerifyUserEmail view to accounts/views.py
> add url for it in accounts/urls.py
> run server and test the route:
http://localhost:8000/api/v1/auth/verify-email/
> got error, (video did not get error):
AssertionError:
'VerifyUserEmail' should either include a `serializer_class` attribute, or override the `get_serializer_class()` method.
> think it needs a api view cannot work without a serializer
> i need to implement this on my own
testuser2@gmail.com
> needed to register a new user, and get an otp, appears to be working, need to check the is verified field of user using admin
> can't remember admin, need a new superuser: shit234@gmail.com-al-do-1
> is_verified is true for user testuser2@gmail.com, testing the same otp again to generate error
> committing
> add login user view to accounts/views.py
> also add login serializer
> update token method of user model (this requires simplejwt)
> pip install djangorestframework-simplejwt
> add configs for simplejwt to settings.py
> add authentication config of rest_framework to settings.py as well
> add simplejwt to isntalled_apps
> we will use this package to generate tokens manually (for token method of user model)
> add url for login
> test the route, (provide email, password only) (OK)
http://localhost:8000/api/v1/auth/login/
> committing
> add a test view that must be accessible to logged in users only (will be called profile)
http://localhost:8000/api/v1/auth/profile/
> tested it with httpie (OK) (first aquire the access token with login route)
> (then put it in bearer auth header and send a get to route)
> committing
- password reset feature
> vid3, add password reset request view to views.py
> add password reset request serializer to serializers.py
> add send normal email function to utils
> add password reset confirm view to views.py
> add set new password view (part of password reset feature) to views.py
> add set new password serializer to serializers.py
> add a url for password reset feature (3 views need urls)
> use a registered user info to test the feature (first login to make sure user exists)
testuser2@gmail.com - loop123* - loop1234*
http://localhost:8000/api/v1/auth/password-reset/
> email containing uidb64 and token is sent back to console, with the following url:
http://localhost:8000/api/v1/auth/password-reset-confirm/< uidb64 is here>/< token is here >/
> that uidb64 and token must be provided to the url below along with the new password we wish to set:
http://localhost:8000/api/v1/auth/set-new-password/
> committing
> token blacklist feature (blacklisting used tokens or is this logout?):
> add rest_framework_simplejwt.token_blacklist to isntalled_apps
> run migrations
> adding logout user view
> also logout serializer
> add new url
http://localhost:8000/api/v1/auth/logout/
> we send the refresh_token to this route, and it will be added to blacklist, i think

- frontend:
> mkdir frontend
> cd frontend
> npm create vite@latest . -- --template react
> npm install
> npm run dev
> npm install react-router-dom@6.4.0 axios@1.1.3
> make components folder in src
> clean App.jsx
> 01 App.jsx
> 02 new component Signup.js
> also new components: Login.js, VerifyEmail.js, Profile.js, ForgotPassword.js
> 03 Signup.js and all other components
- ERROR, Video mistake: rename all components from .js to .jsx
> 04 index.js file
> import all components in App.jsx and make routes for them
> clear out and replace your own App.css (cannot be done)
> 05 complete html part of Signup component 05
> in Signup.jsx we just created a simple form with register view fields
> complete VerifyEmail component 06
> fill in the Login component code 07
> vid5, adding the signup js code 08
> add npm package called react-toastify, add it to App.jsx
> this package is used to easiy add notifications feature
> add this package to signup component as well
> add cors_allowed_hosts to backend settings.py
testuser01@gmail.com-al-keb-lol123 (otp: 544688)
> signup frontend is done and ok
> next, VerifyEmail component code 09
> register a new user
> verify email in frontend is done and working
> although some erros are thrown sometimes (404 and 400)
> let's try another time, testuser08@gmail.com-vim-la-123
> 400 error was raised (i think it's related to complexity of password)
> for now, i will just add a message to notification to ask the user for a complex password
> later a mechanism can be implemented to actually check for the complexity of password
> and prevent submission of form is not all complexity checks are green
> adding the frontend code for login #10
> upon successful login, we must be provided with access_token and refresh_token
> need a new user, testuser10@gmail.com-jay-ko-shit123*-642975
> everything is ok so far, register ok, verify email otp ok, login ok
> now that we got the access and refresh_token, we must save it in either...
> cookies or localStorage (convert to json before setting to localStorage)
> after saving access and refresh_token, we can navigate to a protected route such as profile
> adding profile component code #11
> profile component complete